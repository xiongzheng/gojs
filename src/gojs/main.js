// Generated by CoffeeScript 1.4.0

define(["dojox/gfx", "dojox/gfx/utils", "dojo/_base/lang", "dojo/dom"], function(gfx, utils, lang, dom) {
  var Board, GoBoard;
  Board = (function() {

    Board.EMPTY = 0;

    Board.BLACK = 1;

    Board.WHITE = 2;

    Board.prototype.isNumber = function(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    };

    function Board(size, CURRENT_STONE) {
      this.size = size;
      this.CURRENT_STONE = CURRENT_STONE;
      return;
    }

    return Board;

  })();
  GoBoard = (function() {

    GoBoard.prototype.VERSION = '0.2';

    function GoBoard(container, container_size, board_size) {
      var board_outline, board_outline_length, canvas_length, cell_radius, circle_radius, click, click_detect_group, get_this, group, handle_click, i, index, isNumber, j, letter, ratio, shift, surface, text_buffer, text_movement, text_size, x, x_1, y, y_1;
      this.container = container;
      this.container_size = container_size;
      this.board_size = board_size;
      isNumber = function(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
      };
      if (!lang.isString(this.container) || !isNumber(this.container_size) || !isNumber(this.board_size)) {
        return;
      }
      if (!(dom.byId(this.container) != null)) {
        return;
      }
      if (this.container_size <= 0) {
        return;
      }
      if (this.container_size <= 0) {
        return;
      }
      if (this.board_size > 19) {
        this.board_size = 19;
      }
      if (this.board_size <= 1) {
        return;
      }
      i = this.board_size;
      this.virtual_board = new Array(this.board_size);
      while (i-- > 0) {
        this.virtual_board[i] = new Array(this.board_size);
        j = this.board_size;
        while (j-- > 0) {
          this.virtual_board[i][j] = null;
        }
      }
      get_this = this;
      board_size = this.board_size;
      cell_radius = 25;
      circle_radius = 0.50 * cell_radius;
      text_size = 15;
      /*
      
            from board_outline to canvas edge:
            circle_radius
            circle_radius/2
            text_size
            circle_radius/2
      
            bottom/left: r+r/2 + text_size
            top/right: r+r/2
      */

      text_buffer = 2 * circle_radius + text_size;
      text_movement = 3 * circle_radius / 2;
      canvas_length = (cell_radius * (this.board_size - 1)) + text_buffer * 2;
      y = text_buffer * 1;
      x = text_buffer;
      surface = gfx.createSurface(this.container, this.container_size, this.container_size);
      group = surface.createGroup();
      ratio = this.container_size / canvas_length;
      group.applyTransform(gfx.matrix.scale({
        x: ratio,
        y: ratio
      }));
      board_outline_length = cell_radius * (this.board_size - 1);
      board_outline = group.createRect({
        x: x,
        y: y,
        width: board_outline_length,
        height: board_outline_length
      }).setStroke({
        color: "black",
        width: 2
      });
      click_detect_group = group.createGroup();
      handle_click = function(shape, evt) {
        var circle_fg, coord_x, coord_y, stone, x_1, y_1;
        coord_x = (shape.shape.x - x + cell_radius / 2) / cell_radius;
        coord_y = board_size - 1 - (shape.shape.y - y + cell_radius / 2) / cell_radius;
        if (get_this.virtual_board[coord_y][coord_x] === null) {
          stone = group.createGroup();
          x_1 = shape.shape.x + circle_radius;
          y_1 = shape.shape.y + circle_radius;
          /*
                    circle_fg = stone.createCircle({ cx: x_1, cy: y_1, r:circle_radius }).setFill(
                      type: "radial"
                      cx: x_1 #+ circle_radius*0.2
                      cy: y_1 #+ circle_radius*0.3
                      r: circle_radius*1.2
                      colors: [
                        offset: 0
                        color: "#F0F0F0"
                      ,
                        offset: 0.25
                        color: "#E8E8E8"
                      ,
                        offset: 0.5
                        color: "#E0E0E0"
                      ,      
                        offset: 0.75
                        color: "#D8D8D8"
                      ,                        
                        offset: 0.9
                        color: "#989898"
                      ]
                    ).setStroke("#989898")
          */

          circle_fg = stone.createCircle({
            cx: x_1,
            cy: y_1,
            r: circle_radius
          }).setFill({
            type: "radial",
            cx: x_1 + circle_radius * 0.2,
            cy: y_1,
            r: circle_radius * 1.4,
            colors: [
              {
                offset: 0,
                color: "#484848"
              }, {
                offset: 0.9,
                color: "#000"
              }
            ]
          });
          get_this.virtual_board[coord_y][coord_x] = stone;
          click_detect_group.moveToFront();
        } else {
          console.log("cannot place stone!");
        }
      };
      index = 0;
      while (index < board_size) {
        i = index;
        if (index < board_size - 2) {
          shift = cell_radius * (index + 1);
          x_1 = x + shift;
          y_1 = y + cell_radius * (board_size - 1);
          group.createLine({
            x1: x_1,
            y1: y_1,
            x2: x_1,
            y2: y
          }).setStroke("black").moveToBack();
          y_1 = y + shift;
          x_1 = x + cell_radius * (board_size - 1);
          group.createLine({
            x1: x,
            y1: y_1,
            x2: x_1,
            y2: y_1
          }).setStroke("black").moveToBack();
        }
        letter = String.fromCharCode(65 + index);
        x_1 = x + cell_radius * index;
        group.createText({
          x: x_1,
          y: y + cell_radius * (board_size - 1) + text_size + text_movement,
          text: letter,
          align: "middle"
        }).setFont({
          family: "Arial",
          size: text_size + "px"
        }).setFill("black");
        group.createText({
          x: x_1,
          y: y - text_movement,
          text: letter,
          align: "middle"
        }).setFont({
          family: "Arial",
          size: text_size + "px"
        }).setFill("black");
        y_1 = y + cell_radius * (this.board_size - 1 - index) + text_size / 2;
        group.createText({
          x: x - (text_movement + text_size / 2),
          y: y_1,
          text: index + 1,
          align: "middle"
        }).setFont({
          family: "Arial",
          size: text_size + "px"
        }).setFill("black");
        group.createText({
          x: x + cell_radius * (this.board_size - 1) + (text_movement + text_size / 2),
          y: y_1,
          text: index + 1,
          align: "middle"
        }).setFont({
          family: "Arial",
          size: text_size + "px"
        }).setFill("black");
        j = 0;
        while (j < board_size) {
          x_1 = x - cell_radius / 2 + cell_radius * i;
          y_1 = y - cell_radius / 2 + cell_radius * j;
          click = click_detect_group.createRect({
            x: x_1,
            y: y_1,
            width: cell_radius,
            height: cell_radius
          }).setFill([0, 0, 255, 0.0]).moveToFront();
          this.myConnect(click, "onclick", handle_click);
          j++;
        }
        index++;
      }
      return;
    }

    GoBoard.prototype.myConnect = function(shape, eventName, handler, context) {
      shape.connect(eventName, lang.hitch(context, handler, shape));
    };

    return GoBoard;

  })();
  return GoBoard;
});
